variables:
  PROD_VERSION: 3-2-15
  dockerTag: '$CI_BUILD_REF'
  DOCKER_REPO: r5000:5000
  IMAGE_BNAME_NGINX: workstation_nginx
  IMAGE_BNAME_DASHB: workstation_dashboard
  IMAGE_BNAME_FASTAPI: workstation_docker-fastapi
  IMAGE_BNAME_WORKER: workstation_worker
  STAGE_SERVER: 195.189.108.50
#  RUNHOME: /home/gitlab-runner
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
 
#  IMAGE: $DOCKER_REPO/$IMAGE_BASE_NAME:$CI_BUILD_REF


image: docker:stable


#before_script:
#  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
#  - mkdir -p ~/.ssh
#  - echo "$STAGE_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
#  - chmod 700 ~/.ssh/id_rsa
#  - eval "$(ssh-agent -s)"
#  - ssh-add ~/.ssh/id_rsa
#  - ssh-keyscan -t rsa $STAGE_SERVER > ~/.ssh/known_hosts
#  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#  - chmod 644 ~/.ssh/known_hosts


stages:
  - build
  - test
  - r12n
  - dp2stage

services:
  - docker:dind

cache:
  paths:
    - .cache/pip



before_script:
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - mkdir -p ~/.ssh
  - echo "$STAGE_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 700 ~/.ssh/id_rsa
  - eval "$(ssh-agent -s)"
  - ssh-add ~/.ssh/id_rsa
  - ssh-keyscan -t rsa $STAGE_SERVER > ~/.ssh/known_hosts
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  - chmod 644 ~/.ssh/known_hosts
#  - apt-get update -y && apt-get install py-pip python3-dev libffi-dev openssl-dev gcc libc-dev make
#  - python -m pip install --upgrade pip
  - apk update 
  - apk add py-pip python3-dev libffi-dev openssl-dev gcc libc-dev make
  - pip install --upgrade pip
  - pip install docker-compose
#
#


BuildImg:
  stage: build
  tags:
    - wst1
  script:
#    - docker build -t $IMAGE_BASE_NAME .
    - COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose build
    - docker images

Test:
  stage: test
  tags:
    - wst1
  script:
    - docker images | grep workstation_dashboard

    
RecordImg:
  variables:
    RELEASE_IMAGE_NGINX: $DOCKER_REPO/$IMAGE_BNAME_NGINX:latest
    RELEASE_IMAGE_DASHB: $DOCKER_REPO/$IMAGE_BNAME_DASHB:latest
    RELEASE_IMAGE_FASTAPI: $DOCKER_REPO/$IMAGE_BNAME_FASTAPI:latest
    RELEASE_IMAGE_WORKER: $DOCKER_REPO/$IMAGE_BNAME_WORKER:latest
  stage: r12n
  tags:
    - wst1
  script:
# r12n workstation_nginx 
    - docker tag $IMAGE_BNAME_NGINX $DOCKER_REPO/$IMAGE_BNAME_NGINX:${PROD_VERSION}_$(echo $CI_BUILD_REF | cut -c 1-8)
    - echo $DOCKER_REPO/$IMAGE_BNAME_NGINX:${PROD_VERSION}_$(echo $CI_BUILD_REF | cut -c 1-8 )
    - docker push $DOCKER_REPO/$IMAGE_BNAME_NGINX:${PROD_VERSION}_$(echo $CI_BUILD_REF | cut -c 1-8 )
#
    - docker tag $IMAGE_BNAME_NGINX $RELEASE_IMAGE_NGINX 
    - docker push $RELEASE_IMAGE_NGINX      
# r12n workstation_dashboard
    - docker tag $IMAGE_BNAME_DASHB $DOCKER_REPO/$IMAGE_BNAME_DASHB:${PROD_VERSION}_$(echo $CI_BUILD_REF | cut -c 1-8)
    - echo $DOCKER_REPO/$IMAGE_BNAME_DASHB:${PROD_VERSION}_$(echo $CI_BUILD_REF | cut -c 1-8 )
    - docker push $DOCKER_REPO/$IMAGE_BNAME_DASHB:${PROD_VERSION}_$(echo $CI_BUILD_REF | cut -c 1-8 )
#
    - docker tag $IMAGE_BNAME_DASHB $RELEASE_IMAGE_DASHB 
    - docker push $RELEASE_IMAGE_DASHB      
# r12n workstation_docker-fastapi
    - docker tag $IMAGE_BNAME_FASTAPI $DOCKER_REPO/$IMAGE_BNAME_FASTAPI:${PROD_VERSION}_$(echo $CI_BUILD_REF | cut -c 1-8)
    - echo $DOCKER_REPO/$IMAGE_BNAME_FASTAPI:${PROD_VERSION}_$(echo $CI_BUILD_REF | cut -c 1-8 )
    - docker push $DOCKER_REPO/$IMAGE_BNAME_FASTAPI:${PROD_VERSION}_$(echo $CI_BUILD_REF | cut -c 1-8 )
#
    - docker tag $IMAGE_BNAME_FASTAPI $RELEASE_IMAGE_FASTAPI 
    - docker push $RELEASE_IMAGE_FASTAPI      
# r12n workstation_worker
    - docker tag $IMAGE_BNAME_WORKER $DOCKER_REPO/$IMAGE_BNAME_WORKER:${PROD_VERSION}_$(echo $CI_BUILD_REF | cut -c 1-8)
    - echo $DOCKER_REPO/$IMAGE_BNAME_WORKER:${PROD_VERSION}_$(echo $CI_BUILD_REF | cut -c 1-8 )
    - docker push $DOCKER_REPO/$IMAGE_BNAME_WORKER:${PROD_VERSION}_$(echo $CI_BUILD_REF | cut -c 1-8 )
#
    - docker tag $IMAGE_BNAME_WORKER $RELEASE_IMAGE_WORKER 
    - docker push $RELEASE_IMAGE_WORKER      
#    - echo $PROD_VERSION    
#    - echo $DOCKER_REPO/$IMAGE_BASE_NAME:${PROD_VERSION}_$(echo $CI_BUILD_REF | cut -c 1-7 )
#
#
#
Deploy2stage:
  variables:
    RELEASE_IMAGE_NGINX: $DOCKER_REPO/$IMAGE_BNAME_NGINX:latest
    RELEASE_IMAGE_DASHB: $DOCKER_REPO/$IMAGE_BNAME_DASHB:latest
    RELEASE_IMAGE_FASTAPI: $DOCKER_REPO/$IMAGE_BNAME_FASTAPI:latest
    RELEASE_IMAGE_WORKER: $DOCKER_REPO/$IMAGE_BNAME_WORKER:latest
  stage: dp2stage
  tags:
    - wst1
  script:
#    - echo 123
#    - echo $RELEASE_IMAGE
#    - ssh deploy@192.168.9.148  "sudo -u deploy docker pull $RELEASE_IMAGE"
#    - ssh -o StrictHostKeyChecking=no deploy@192.168.9.148  "docker pull registry:5000/slogan:latest"
#    - ssh vadim@$STAGE_SERVER  "docker pull r5000:5000/workstation_nginx:latest"
    - ssh vadim@$STAGE_SERVER  "docker pull $RELEASE_IMAGE_NGINX"
    - ssh vadim@$STAGE_SERVER  "docker pull $RELEASE_IMAGE_DASHB"
    - ssh vadim@$STAGE_SERVER  "docker pull $RELEASE_IMAGE_FASTAPI"
    - ssh vadim@$STAGE_SERVER  "docker pull $RELEASE_IMAGE_WORKER"
#    - ansible-playbook -i $RUNHOME/ahosts $RUNHOME/get_latest.yml --extra-vars "image=$RELEASE_IMAGE"
#

       